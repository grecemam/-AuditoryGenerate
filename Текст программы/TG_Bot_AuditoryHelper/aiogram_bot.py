from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, CallbackQuery
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import aiohttp
import os
import json
import datetime
from PIL import Image, ImageDraw, ImageFont
import re
import io
import difflib
from bs4 import BeautifulSoup
import ssl
import asyncio


API_TOKEN = "7239904904:AAERNwCNjt59pZGFpVWGinLBwNZeNEsZFJo"
API_BASE_URL = "http://auditoryhelperapi.somee.com"

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class ScheduleState(StatesGroup):
    waiting_for_group = State()
    group_selected = State()

WEEK_DAYS = ["–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö", "–í–¢–û–†–ù–ò–ö", "–°–†–ï–î–ê", "–ß–ï–¢–í–ï–†–ì", "–ü–Ø–¢–ù–ò–¶–ê", "–°–£–ë–ë–û–¢–ê"]

DAYS_MAPPING = {
    "Monday": "–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö",
    "Tuesday": "–í–¢–û–†–ù–ò–ö",
    "Wednesday": "–°–†–ï–î–ê",
    "Thursday": "–ß–ï–¢–í–ï–†–ì",
    "Friday": "–ü–Ø–¢–ù–ò–¶–ê",
    "Saturday": "–°–£–ë–ë–û–¢–ê",
    "Sunday": "–í–û–°–ö–†–ï–°–ï–ù–¨–ï"
}

def get_russian_day():
    today_en = datetime.datetime.now().strftime("%A")
    return DAYS_MAPPING.get(today_en, today_en)

def create_days_keyboard(group_schedule: dict) -> types.InlineKeyboardMarkup:
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    available_days = []

    for day in WEEK_DAYS:
        day_data = group_schedule.get("Days", {}).get(day)
        if day_data:
            has_lessons = any(day_data.get("Buildings", {}).values())
            if has_lessons:
                available_days.append(day)

    buttons = [
        types.InlineKeyboardButton(day.title(), callback_data=f"day_{day}")
        for day in available_days
    ]
    keyboard.add(*buttons)
    return keyboard

@dp.message_handler(commands=["start"])
async def cmd_start(message: Message):
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî *AuditoryBot*, —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∏ –∞—É–¥–∏—Ç–æ—Ä–∏—è–º.\n\n"
        "üìå –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ /schedule ‚Äî —É–∑–Ω–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–µ\n"
        "‚Ä¢ /auditory ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª —Å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏–π\n"
        "‚Ä¢ /teacher –§–∞–º–∏–ª–∏—è ‚Äî —É–∑–Ω–∞—Ç—å, –≥–¥–µ –ø—Ä–µ–ø–æ–¥–∞—ë—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å\n\n"
        "üß≠ –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é. –ï—Å–ª–∏ —á—Ç–æ ‚Äî —è –≤—Å–µ–≥–¥–∞ —Ä—è–¥–æ–º üòé"
    )
    await message.answer(text, parse_mode="Markdown")


@dp.message_handler(commands=["schedule"], state="*")
async def cmd_schedule(message: Message, state: FSMContext):
    await state.finish()  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –∑–∞—Å—Ç—Ä—è–ª–∏
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ü50-7-21")
    await ScheduleState.waiting_for_group.set()
@dp.message_handler(state=ScheduleState.waiting_for_group)
async def handle_group_name(message: Message, state: FSMContext):
    if message.text.startswith("/"):
        await state.finish()
        await bot.process_updates([types.Update(message=message)])
        return

    group_name = message.text.strip()

    try:
        with open("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ_–ú–ü–¢.json", "r", encoding="utf-8") as f:
            schedule_data = json.load(f)
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        return

    all_groups = schedule_data.get("Groups", {})
    matched_name = next((g for g in all_groups.keys() if group_name.lower() == g.lower()), None)

    if matched_name:
        await state.update_data(group_name=matched_name)
        await message.answer(f"‚úÖ –ì—Ä—É–ø–ø–∞ –Ω–∞–π–¥–µ–Ω–∞: {matched_name}\n‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
        await send_schedule_for_today(message, matched_name)
        await ScheduleState.group_selected.set()
    else:
        await message.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")


async def send_schedule_for_today(message_or_query, group_name, day=None):
    try:
        with open("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ_–ú–ü–¢.json", "r", encoding="utf-8") as f:
            schedule_data = json.load(f)
    except Exception as e:
        await message_or_query.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        return

    today = day or get_russian_day()
    group_schedule = schedule_data.get("Groups", {}).get(group_name)

    if not group_schedule:
        await message_or_query.answer("‚ùå –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    day_schedule = group_schedule.get("Days", {}).get(today.upper())
    if not day_schedule:
        await message_or_query.answer(f"‚ÑπÔ∏è –ù–∞ {today.title()} –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç.")
        return

    result = f"üìö *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã {group_name} –Ω–∞ {today.title()}*\n\n"

    number_emojis = {
        "1": "1 –ø–∞—Ä–∞: ", "2": "2 –ø–∞—Ä–∞: ", "3": "3 –ø–∞—Ä–∞: ",
        "4": "4 –ø–∞—Ä–∞: ", "5": "5 –ø–∞—Ä–∞: ", "6": "6 –ø–∞—Ä–∞: ",
        "7": "7 –ø–∞—Ä–∞: ", "8": "8 –ø–∞—Ä–∞: "
    }

    for building, lessons in day_schedule.get("Buildings", {}).items():
        result += f"üèõÔ∏è *{building}*\n"
        if not lessons:
            result += "_–ù–µ—Ç –∑–∞–Ω—è—Ç–∏–π_\n\n"
            continue
        for lesson in lessons:
            pair_raw = lesson.get("LessonNumber", "")
            subject = lesson.get("Subject", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            teacher = lesson.get("Teacher", "–ù–µ —É–∫–∞–∑–∞–Ω")

            match = re.match(r"(\d+)", pair_raw.strip())
            if match:
                num = match.group(1)
                emoji = number_emojis.get(num, f"{num})")
            else:
                emoji = "üîπ"

            result += f"{emoji} {subject} ‚Äî {teacher}\n"
        result += "\n"
    # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –∏ –≤—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–º–µ–Ω—ã
    changes_text = await get_schedule_changes_for_day(group_name, today)
    if changes_text:
        result += "\n\n" + changes_text

    if isinstance(message_or_query, Message):
        await message_or_query.answer(result, parse_mode="Markdown", reply_markup=create_days_keyboard(group_schedule))
    elif isinstance(message_or_query, CallbackQuery):
        await message_or_query.message.answer(result, parse_mode="Markdown", reply_markup=create_days_keyboard(group_schedule))
    

@dp.callback_query_handler(lambda c: c.data.startswith("day_"), state=ScheduleState.group_selected)
async def handle_day_callback(callback_query: CallbackQuery, state: FSMContext):
    selected_day = callback_query.data.replace("day_", "").upper()
    data = await state.get_data()
    group_name = data.get("group_name")
    try:
        await callback_query.message.delete()
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    await send_schedule_for_today(callback_query, group_name, day=selected_day)
    await callback_query.answer()

@dp.message_handler(commands=["auditory"], state="*")
async def cmd_auditory(message: Message, state: FSMContext):
    await state.finish()  # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("–ù–∞—Ö–∏–º–æ–≤—Å–∫–∏–π", callback_data="auditory_nahim"),
        types.InlineKeyboardButton("–ù–µ–∂–∏–Ω—Å–∫–∞—è", callback_data="auditory_nezhka")
    )
    await message.answer("üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–ø—É—Å:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("auditory_"))
async def send_auditory_file(callback_query: CallbackQuery):
    campus = callback_query.data.replace("auditory_", "")
    filename = "AuditFileNahimov.xlsx" if campus == "nahim" else "AuditFileNezhka.xlsx"
    path = f"{API_BASE_URL}/files/{filename}"

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(path) as resp:
                if resp.status == 200:
                    data = await resp.read()
                    buffer = io.BytesIO(data)
                    buffer.name = filename
                    await bot.send_document(callback_query.message.chat.id, types.InputFile(buffer))
                else:
                    await callback_query.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª —Å —Å–µ—Ä–≤–µ—Ä–∞.")
    except Exception as e:
        await callback_query.message.answer(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
    await callback_query.answer()

@dp.message_handler(commands=["teacher"], state="*")
async def cmd_teacher(message: Message, state: FSMContext):
    await state.finish()
    teacher_query = message.text.replace("/teacher", "").strip().lower()

    if not teacher_query:
        await message.answer("‚úçÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä:\n`/teacher –§–∞–º–∏–ª–∏—è`", parse_mode="Markdown")
        return

    async with aiohttp.ClientSession() as session:
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
            async with session.get(f"{API_BASE_URL}/files/distributed_teachers_today.json") as resp1:
                if resp1.status != 200:
                    await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.")
                    return
                raw_data = await resp1.read()
                decoded = raw_data.decode("utf-8-sig")
                teacher_list = json.loads(decoded)

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
            async with session.get(f"{API_BASE_URL}/api/Teachers") as resp2:
                if resp2.status != 200:
                    await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.")
                    return
                all_teachers = await resp2.json()

            reply = ""
            names = [t["fullName"] for t in all_teachers]
            closest = difflib.get_close_matches(teacher_query, [n.lower() for n in names], n=1, cutoff=0.6)
            matched = [t for t in all_teachers if t["fullName"].lower() in closest]


            if not matched:
                await message.answer("‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            for t in matched:
                full_name = t["fullName"]
                found = next((d for d in teacher_list if full_name.lower() in d["teacher"].lower()), None)
                if found:
                    reply += f"üë®‚Äçüè´ *{full_name}*\nüè¢ –ö–æ—Ä–ø—É—Å: *{found['campus']}*\nüè´ –ö–∞–±–∏–Ω–µ—Ç: *{found['room']}*\n\n"
                else:
                    reply += f"üë®‚Äçüè´ *{full_name}*\nüìÖ *–í—ã—Ö–æ–¥–Ω–æ–π :)*\n\n"

            await message.answer(reply.strip(), parse_mode="Markdown")

        except Exception as e:
            await message.answer(f"üö´ –û—à–∏–±–∫–∞: {e}")

async def get_schedule_changes_for_day(group_name: str, day_rus: str) -> str:
    url = "https://mpt.ru/izmeneniya-v-raspisanii/"
    ssl_context = ssl.create_default_context()
    ssl_context.check_hostname = False
    ssl_context.verify_mode = ssl.CERT_NONE

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, ssl=ssl_context) as response:
                if response.status != 200:
                    return ""

                html = await response.text()
                soup = BeautifulSoup(html, "html.parser")

                # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ "–ó–∞–º–µ–Ω—ã –Ω–∞ 05.05.2025"
                h4 = soup.find("h4")
                if not h4 or "–∑–∞–º–µ–Ω—ã –Ω–∞" not in h4.text.lower():
                    return ""

                match = re.search(r"(\d{2}\.\d{2}\.\d{4})", h4.text)
                if not match:
                    return ""

                target_date = match.group(1)  # –Ω–∞–ø—Ä–∏–º–µ—Ä "05.05.2025"

                tables = soup.find_all("table", class_="table-striped")
                for table in tables:
                    caption = table.find("caption")
                    if caption and group_name.lower() in caption.text.lower():
                        rows = table.find_all("tr")[1:]
                        changes = []
                        for row in rows:
                            cols = row.find_all("td")
                            if len(cols) >= 3:
                                para = cols[0].text.strip()
                                old = cols[1].text.strip()
                                new = cols[2].text.strip()
                                changes.append(f"{para} –ø–∞—Ä–∞: {old} ‚ûú {new}")
                        if changes:
                            return f"üîÑ *–ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ {target_date}*:\n" + "\n".join(changes)
        return ""
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–º–µ–Ω: {e}"

def get_next_date_for_weekday(russian_weekday: str) -> str:
    day_to_index = {
        "–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö": 0,
        "–í–¢–û–†–ù–ò–ö": 1,
        "–°–†–ï–î–ê": 2,
        "–ß–ï–¢–í–ï–†–ì": 3,
        "–ü–Ø–¢–ù–ò–¶–ê": 4,
        "–°–£–ë–ë–û–¢–ê": 5,
        "–í–û–°–ö–†–ï–°–ï–ù–¨–ï": 6
    }

    today = datetime.datetime.now()
    today_idx = today.weekday()
    target_idx = day_to_index.get(russian_weekday.upper(), 0)

    days_ahead = (target_idx - today_idx + 7) % 7
    if days_ahead == 0:
        days_ahead = 7  # –°–ª–µ–¥—É—é—â–∏–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫

    target_date = today + datetime.timedelta(days=days_ahead)
    return target_date.strftime("%d.%m.%Y")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
